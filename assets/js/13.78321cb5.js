(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{212:function(t,s,e){"use strict";e.r(s);var a=e(5),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"control-flows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#control-flows"}},[t._v("#")]),t._v(" Control Flows")]),t._v(" "),e("p",[t._v('We have learned how to use Python as a "calculator", i.e., creating variables, assigning values, and writing formulas to get an outcome.\nIn this lesson, we will work on control flows to make Python handle more situations and write more complex programs.')]),t._v(" "),e("h2",{attrs:{id:"if-statements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-statements"}},[t._v("#")]),t._v(" "),e("code",[t._v("if")]),t._v(" statements")]),t._v(" "),e("p",[t._v("In case we want to execute a block of codes only if a condition is met, "),e("code",[t._v("if")]),t._v(" statements come in handy for this purpose.")]),t._v(" "),e("p",[t._v("Let's take a look at the following example.")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("a "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a is less than b"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("An "),e("code",[t._v("if")]),t._v(" statement consists of at least two parts:")]),t._v(" "),e("ul",[e("li",[t._v("a "),e("code",[t._v("condition")])]),t._v(" "),e("li",[t._v("a block (or "),e("code",[t._v("body")]),t._v(") of codes to execute if "),e("code",[t._v("condition")]),t._v(" satisfies")])]),t._v(" "),e("p",[t._v("In the previous example,")]),t._v(" "),e("ul",[e("li",[t._v("the "),e("code",[t._v("condition")]),t._v(" is whether "),e("code",[t._v("b > a")])]),t._v(" "),e("li",[t._v("the code to run is to display "),e("code",[t._v('"a is less than b"')])])]),t._v(" "),e("p",[e("strong",[t._v("Notice that")])]),t._v(" "),e("ul",[e("li",[t._v("the "),e("code",[t._v("condition")]),t._v(" is a statement with "),e("RouterLink",{attrs:{to:"/lessons/operator.html#comparison-operators"}},[t._v("comparison operators")]),t._v(". In fact, we can use any form of statement as long as that statement returns a boolean. Thus, "),e("RouterLink",{attrs:{to:"/lessons/operator.html#logical-operators"}},[t._v("logical operators")]),t._v(" would also work. Or simply placing a "),e("code",[t._v("True")]),t._v(" or "),e("code",[t._v("False")]),t._v(" as the "),e("code",[t._v("condition")]),t._v(".")],1),t._v(" "),e("li",[t._v("the "),e("code",[t._v("condition")]),t._v(" ends with a "),e("code",[t._v(":")]),t._v(". This is the structure of an "),e("code",[t._v("if")]),t._v(" statement. The Python interpreter knows it would expect some codes to fill the "),e("code",[t._v("body")])]),t._v(" "),e("li",[t._v("the code in "),e("code",[t._v("body")]),t._v(" is "),e("em",[t._v("indented")]),t._v(". Python "),e("strong",[t._v("always")]),t._v(" uses indentation to control the flow of codes, unlike other languages that may use a pair of "),e("code",[t._v("{}")]),t._v(". The best practice is to use "),e("strong",[t._v("4 spaces")]),t._v(" as indentation.")]),t._v(" "),e("li",[t._v("Indentation can be nested if we choose to use nested structures.")])]),t._v(" "),e("p",[t._v("Here's another example.")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("x "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The first "),e("code",[t._v("print(x)")]),t._v(" is within the "),e("code",[t._v("body")]),t._v(" of "),e("code",[t._v("if x > 0")]),t._v(". It is indented by 4 spaces.\nHowever, the second "),e("code",[t._v("print(y)")]),t._v(" and third "),e("code",[t._v("print(z)")]),t._v(" are within the "),e("code",[t._v("body")]),t._v(" of "),e("code",[t._v("if y < 100")]),t._v(".\nThey are both indented by 8 spaces.")]),t._v(" "),e("p",[t._v("These statements are to display value of "),e("code",[t._v("x")]),t._v(" if "),e("code",[t._v("x")]),t._v(" is greater than zero and further to display value of "),e("code",[t._v("y")]),t._v(" and "),e("code",[t._v("z")]),t._v(" if "),e("code",[t._v("y")]),t._v(" is less than one hundred.")]),t._v(" "),e("p",[t._v("What if the indentation of the third "),e("code",[t._v("print(z)")]),t._v(" changes.")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("x "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Now value of "),e("code",[t._v("z")]),t._v(" will display as long as "),e("code",[t._v("x")]),t._v(" is greater than zero, regardless of "),e("code",[t._v("y")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"elif"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elif"}},[t._v("#")]),t._v(" "),e("code",[t._v("elif")])]),t._v(" "),e("p",[t._v("An "),e("code",[t._v("if")]),t._v(" statement can chain with zero or more "),e("code",[t._v("elif")]),t._v(', which reads as "else if".\nAn \'elif` branch works as additional steps to evaluate the conditions and run codes accordingly.')]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is greater than 0"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is 0"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is less than 0"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"else"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#else"}},[t._v("#")]),t._v(" "),e("code",[t._v("else")])]),t._v(" "),e("p",[t._v("An "),e("code",[t._v("else")]),t._v(" branch is the catch-all situation for an "),e("code",[t._v("if")]),t._v(" statement, it runs if all the previous conditions return "),e("code",[t._v("False")])]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is greater than 0"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is 0"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is less than 0 but somehow greater than -10"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is not greater than -10"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"assignment-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assignment-3"}},[t._v("#")]),t._v(" Assignment 3")]),t._v(" "),e("p",[t._v("Create a Python script named "),e("code",[t._v("bmi_calculator.py")]),t._v(" that prompts for weight in pounds and height in inches. The script will then calculate and display the body mass index (BMI). It will also prompt the BMI classification.")]),t._v(" "),e("p",[t._v("BMI = (Weight in Pounds / (Height in inches x Height in inches)) x 703")]),t._v(" "),e("p",[t._v("The BMI classification is as follows.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("BMI")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("BMI Classification")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("18.5 or less")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Underweight")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("18.5 to 24.99")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Normal Weight")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("25 to 29.99")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Overweight")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("30 to 34.99")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Obesity (Class 1)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("35 to 39.99")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Obesity (Class 2)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("40 or greater")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Morbid Obesity")])])])]),t._v(" "),e("p",[t._v("A sample run of the script would look like")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("python bmi_calculator.py\nEnter weight "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" pounds: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\nEnter height "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" inches: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("69")]),t._v("\nBMI "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("29.531611006091154")]),t._v("\nBMI Classification "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Overweight\n")])])]),e("h2",{attrs:{id:"while-statements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#while-statements"}},[t._v("#")]),t._v(" "),e("code",[t._v("while")]),t._v(" statements")]),t._v(" "),e("p",[t._v("With the "),e("code",[t._v("while")]),t._v(" loop we can execute a set of statements as long as a condition is met.")]),t._v(" "),e("p",[t._v("Let's take a look at the following example.")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),e("p",[e("strong",[t._v("Notice that")])]),t._v(" "),e("ul",[e("li",[t._v("the "),e("code",[t._v("condition")]),t._v(" to control the "),e("code",[t._v("while")]),t._v(" loop is "),e("code",[t._v("i < 10")])]),t._v(" "),e("li",[t._v("the body of the "),e("code",[t._v("while")]),t._v(" loop is also indented")])]),t._v(" "),e("p",[t._v("In plain language, the "),e("code",[t._v("while")]),t._v(" loop tries to display the value of i as long as i is less than ten.\nAnd within each iteration of the loop, i increments by 1.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("It's important to change the value of some variable that has impact on the condition eventually.\nOtherwise the "),e("code",[t._v("while")]),t._v(" statements would never end and become an infinite loop.")]),t._v(" "),e("p",[t._v("Use "),e("code",[t._v("while")]),t._v(" loop when we are not sure about how many times the loop shall run but we know the condition to continue.")]),t._v(" "),e("p",[t._v("For example, a simple guessing game")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("to_play "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\nsecret "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" to_play"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    guess "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"what is the secret? "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" secret "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" guess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        to_play "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You\'ve got it!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Wrong guess :("')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),e("h3",{attrs:{id:"break"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#break"}},[t._v("#")]),t._v(" "),e("code",[t._v("break")])]),t._v(" "),e("p",[t._v("We can use "),e("code",[t._v("break")]),t._v(" to stop and escape the loop.")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),e("p",[t._v("The loop above would only display 0 to 4 since when i equals 5, the loop terminates.")]),t._v(" "),e("h3",{attrs:{id:"continue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#continue"}},[t._v("#")]),t._v(" "),e("code",[t._v("continue")])]),t._v(" "),e("p",[t._v("We can use "),e("code",[t._v("continue")]),t._v(" to skip and continue on with the next iteration of the loop.")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The loop above would only display all the integers from 1 to 10 except for 5 (notice the increment of i is moved to the beginning of the body). The reason is that when i equals 5, the loop jumps out current iteration (not displaying the value) and then continue on to the next, until i is no less than ten.")]),t._v(" "),e("h2",{attrs:{id:"assignment-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assignment-4"}},[t._v("#")]),t._v(" Assignment 4")]),t._v(" "),e("p",[t._v("Create a Python script named "),e("code",[t._v("square.py")]),t._v(" that prompts for length of a square. The script will then display a square of the given length in the terminal.")]),t._v(" "),e("p",[t._v("You can use any character to represent the side of a square. A sample run would look like the following")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("python square.py\nEnter length: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n*****\n*   *\n*   *\n*   *\n*****\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("The terminal only draws character row by row. To generate a square in terminal, we need to put ourself in the shoe of a terminal. Think of these questions:")]),t._v(" "),e("ol",[e("li",[t._v("How do I draw the first row?")]),t._v(" "),e("li",[t._v("How do I draw the next row?")]),t._v(" "),e("li",[t._v("How do I draw the last row?")])]),t._v(" "),e("p",[t._v("By the way, the "),e("code",[t._v("*")]),t._v(" operator can be applied on strings. It then duplicate that string multiple times, depending on the value on the right hand side of "),e("code",[t._v("*")]),t._v(".")]),t._v(" "),e("p",[t._v("Say, "),e("code",[t._v('print("=" * 3)')]),t._v(" would display "),e("code",[t._v("===")])]),t._v(" "),e("p",[e("code",[t._v('print("Hello" * 2)')]),t._v(" would display "),e("code",[t._v("HelloHello")])])]),t._v(" "),e("h2",{attrs:{id:"for-statements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-statements"}},[t._v("#")]),t._v(" "),e("code",[t._v("for")]),t._v(" statements")]),t._v(" "),e("h2",{attrs:{id:"assignment-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assignment-5"}},[t._v("#")]),t._v(" Assignment 5")])])}),[],!1,null,null,null);s.default=n.exports}}]);