(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{208:function(t,s,a){"use strict";a.r(s);var e=a(5),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"control-flows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#control-flows"}},[t._v("#")]),t._v(" Control Flows")]),t._v(" "),a("p",[t._v('We have learned how to use Python as a "calculator", i.e., creating variables, assigning values, and writing formulas to get an outcome.\nIn this lesson, we will work on control flows to make Python handle more situations and write more complex programs.')]),t._v(" "),a("h2",{attrs:{id:"if-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-statements"}},[t._v("#")]),t._v(" "),a("code",[t._v("if")]),t._v(" statements")]),t._v(" "),a("p",[t._v("In case we want to execute a block of codes only if a condition is met, "),a("code",[t._v("if")]),t._v(" statements come in handy for this purpose.")]),t._v(" "),a("p",[t._v("Let's take a look at the following example.")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a is less than b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("An "),a("code",[t._v("if")]),t._v(" statement consists of at least two parts:")]),t._v(" "),a("ul",[a("li",[t._v("a "),a("code",[t._v("condition")])]),t._v(" "),a("li",[t._v("a block (or "),a("code",[t._v("body")]),t._v(") of codes to execute if "),a("code",[t._v("condition")]),t._v(" satisfies")])]),t._v(" "),a("p",[t._v("In the previous example,")]),t._v(" "),a("ul",[a("li",[t._v("the "),a("code",[t._v("condition")]),t._v(" is whether "),a("code",[t._v("b > a")])]),t._v(" "),a("li",[t._v("the code to run is to display "),a("code",[t._v('"a is less than b"')])])]),t._v(" "),a("p",[a("strong",[t._v("Notice that")])]),t._v(" "),a("ul",[a("li",[t._v("the "),a("code",[t._v("condition")]),t._v(" is a statement with "),a("RouterLink",{attrs:{to:"/lessons/operator.html#comparison-operators"}},[t._v("comparison operators")]),t._v(". In fact, we can use any form of statement as long as that statement returns a boolean. Thus, "),a("RouterLink",{attrs:{to:"/lessons/operator.html#logical-operators"}},[t._v("logical operators")]),t._v(" would also work. Or simply placing a "),a("code",[t._v("True")]),t._v(" or "),a("code",[t._v("False")]),t._v(" as the "),a("code",[t._v("condition")]),t._v(".")],1),t._v(" "),a("li",[t._v("the "),a("code",[t._v("condition")]),t._v(" ends with a "),a("code",[t._v(":")]),t._v(". This is the structure of an "),a("code",[t._v("if")]),t._v(" statement. The Python interpreter knows it would expect some codes to fill the "),a("code",[t._v("body")])]),t._v(" "),a("li",[t._v("the code in "),a("code",[t._v("body")]),t._v(" is "),a("em",[t._v("indented")]),t._v(". Python "),a("strong",[t._v("always")]),t._v(" uses indentation to control the flow of codes, unlike other languages that may use a pair of "),a("code",[t._v("{}")]),t._v(". The best practice is to use "),a("strong",[t._v("4 spaces")]),t._v(" as indentation.")]),t._v(" "),a("li",[t._v("Indentation can be nested if we choose to use nested structures.")])]),t._v(" "),a("p",[t._v("Here's another example.")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("The first "),a("code",[t._v("print(x)")]),t._v(" is within the "),a("code",[t._v("body")]),t._v(" of "),a("code",[t._v("if x > 0")]),t._v(". It is indented by 4 spaces.\nHowever, the second "),a("code",[t._v("print(y)")]),t._v(" and third "),a("code",[t._v("print(z)")]),t._v(" are within the "),a("code",[t._v("body")]),t._v(" of "),a("code",[t._v("if y < 100")]),t._v(".\nThey are both indented by 8 spaces.")]),t._v(" "),a("p",[t._v("These statements are to display value of "),a("code",[t._v("x")]),t._v(" if "),a("code",[t._v("x")]),t._v(" is greater than zero and further to display value of "),a("code",[t._v("y")]),t._v(" and "),a("code",[t._v("z")]),t._v(" if "),a("code",[t._v("y")]),t._v(" is less than one hundred.")]),t._v(" "),a("p",[t._v("What if the indentation of the third "),a("code",[t._v("print(z)")]),t._v(" changes.")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Now value of "),a("code",[t._v("z")]),t._v(" will display as long as "),a("code",[t._v("x")]),t._v(" is greater than zero, regardless of "),a("code",[t._v("y")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"elif"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elif"}},[t._v("#")]),t._v(" elif")]),t._v(" "),a("p",[t._v("An "),a("code",[t._v("if")]),t._v(" statement can chain with zero or more "),a("code",[t._v("elif")]),t._v(', which reads as "else if".\nAn \'elif` branch works as additional steps to evaluate the conditions and run codes accordingly.')]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is greater than 0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is 0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is less than 0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"else"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#else"}},[t._v("#")]),t._v(" else")]),t._v(" "),a("p",[t._v("An "),a("code",[t._v("else")]),t._v(" branch is the catch-all situation for an "),a("code",[t._v("if")]),t._v(" statement, it runs if all the previous conditions return "),a("code",[t._v("False")])]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is greater than 0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is 0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is less than 0 but somehow greater than -10"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is not greater than -10"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"assignment-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assignment-3"}},[t._v("#")]),t._v(" Assignment 3")]),t._v(" "),a("p",[t._v("Create a Python script named "),a("code",[t._v("bmi_calculator.py")]),t._v(" that prompts for weight in pounds and height in inches. The script will then calculate and display the body mass index (BMI). It will also prompt the BMI classification.")]),t._v(" "),a("p",[t._v("BMI = (Weight in Pounds / (Height in inches x Height in inches)) x 703")]),t._v(" "),a("p",[t._v("The BMI classification is as follows.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("BMI")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("BMI Classification")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("18.5 or less")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Underweight")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("18.5 to 24.99")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Normal Weight")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("25 to 29.99")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Overweight")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("30 to 34.99")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Obesity (Class 1)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("35 to 39.99")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Obesity (Class 2)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("40 or greater")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Morbid Obesity")])])])]),t._v(" "),a("p",[t._v("A sample run of the script would look like")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("python bmi_calculator.py\nEnter weight "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" pounds: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\nEnter height "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" inches: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("69")]),t._v("\nBMI "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("29.531611006091154")]),t._v("\nBMI Classification "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Overweight\n")])])]),a("h2",{attrs:{id:"while-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-statements"}},[t._v("#")]),t._v(" "),a("code",[t._v("while")]),t._v(" statements")]),t._v(" "),a("h2",{attrs:{id:"for-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-statements"}},[t._v("#")]),t._v(" "),a("code",[t._v("for")]),t._v(" statements")]),t._v(" "),a("h2",{attrs:{id:"assignment-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assignment-4"}},[t._v("#")]),t._v(" Assignment 4")])])}),[],!1,null,null,null);s.default=n.exports}}]);